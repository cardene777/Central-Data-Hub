{
  "address": "0x84EB70E21C30128908A9F2d50124E9b4e56D8393",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "isValidSigner",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3f5312094a0755371318b448d7fda18648009d6bb4ae03d44d3cc62a6828bbb0",
  "receipt": {
    "to": null,
    "from": "0xAe451f1873B4C4D7263631Bf0ea141D54Ba39eEa",
    "contractAddress": "0x84EB70E21C30128908A9F2d50124E9b4e56D8393",
    "transactionIndex": 0,
    "gasUsed": "790831",
    "logsBloom": "0x
    "blockHash": "0x611492fc793011fc16e5f5138e619145a747bde6d9791606a4b777865c6ec2a0",
    "transactionHash": "0x3f5312094a0755371318b448d7fda18648009d6bb4ae03d44d3cc62a6828bbb0",
    "logs": [],
    "blockNumber": 662348,
    "cumulativeGasUsed": "790831",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e0bf5d2ceede82ca9772e44d7e51d243",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isValidSigner\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC6551Account.sol\":\"ERC6551Account\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x6b11eb41a228cca35d4b662b4df69fcd75192851365102690f57b2ac01e83fe6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/ERC6551Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\n// https://github.com/erc6551/reference/blob/main/src/examples/simple/ERC6551Account.sol\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC1271 } from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport { SignatureChecker } from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport { IERC721Receiver } from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport { IERC1155Receiver } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ninterface IERC6551Account {\\n\\treceive() external payable;\\n\\n\\tfunction token()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 chainId, address tokenContract, uint256 tokenId);\\n\\n\\tfunction state() external view returns (uint256);\\n\\n\\tfunction isValidSigner(\\n\\t\\taddress signer,\\n\\t\\tbytes calldata context\\n\\t) external view returns (bytes4 magicValue);\\n}\\n\\ninterface IERC6551Executable {\\n\\tfunction execute(\\n\\t\\taddress to,\\n\\t\\tuint256 value,\\n\\t\\tbytes calldata data,\\n\\t\\tuint8 operation\\n\\t) external payable returns (bytes memory);\\n}\\n\\ncontract ERC6551Account is\\n\\tIERC165,\\n\\tIERC1271,\\n\\tIERC6551Account,\\n\\tIERC6551Executable,\\n\\tIERC721Receiver,\\n\\tIERC1155Receiver\\n{\\n\\tuint256 public state;\\n\\n\\treceive() external payable {}\\n\\n\\tfunction execute(\\n\\t\\taddress to,\\n\\t\\tuint256 value,\\n\\t\\tbytes calldata data,\\n\\t\\tuint8 operation\\n\\t) external payable virtual returns (bytes memory result) {\\n\\t\\trequire(_isValidSigner(msg.sender), \\\"Invalid signer\\\");\\n\\t\\trequire(operation == 0, \\\"Only call operations are supported\\\");\\n\\n\\t\\t++state;\\n\\n\\t\\tbool success;\\n\\t\\t(success, result) = to.call{ value: value }(data);\\n\\n\\t\\tif (!success) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\trevert(add(result, 32), mload(result))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction isValidSigner(\\n\\t\\taddress signer,\\n\\t\\tbytes calldata\\n\\t) external view virtual returns (bytes4) {\\n\\t\\tif (_isValidSigner(signer)) {\\n\\t\\t\\treturn IERC6551Account.isValidSigner.selector;\\n\\t\\t}\\n\\n\\t\\treturn bytes4(0);\\n\\t}\\n\\n\\tfunction isValidSignature(\\n\\t\\tbytes32 hash,\\n\\t\\tbytes memory signature\\n\\t) external view virtual returns (bytes4 magicValue) {\\n\\t\\tbool isValid = SignatureChecker.isValidSignatureNow(\\n\\t\\t\\towner(),\\n\\t\\t\\thash,\\n\\t\\t\\tsignature\\n\\t\\t);\\n\\n\\t\\tif (isValid) {\\n\\t\\t\\treturn IERC1271.isValidSignature.selector;\\n\\t\\t}\\n\\n\\t\\treturn bytes4(0);\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t) public view virtual returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC165).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC6551Account).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC6551Executable).interfaceId;\\n\\t}\\n\\n\\tfunction token() public view virtual returns (uint256, address, uint256) {\\n\\t\\tbytes memory footer = new bytes(0x60);\\n\\n\\t\\tassembly {\\n\\t\\t\\textcodecopy(address(), add(footer, 0x20), 0x4d, 0x60)\\n\\t\\t}\\n\\n\\t\\treturn abi.decode(footer, (uint256, address, uint256));\\n\\t}\\n\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\t(uint256 chainId, address tokenContract, uint256 tokenId) = token();\\n\\t\\tif (chainId != block.chainid) return address(0);\\n\\n\\t\\treturn IERC721(tokenContract).ownerOf(tokenId);\\n\\t}\\n\\n\\tfunction _isValidSigner(\\n\\t\\taddress signer\\n\\t) internal view virtual returns (bool) {\\n\\t\\treturn signer == owner();\\n\\t}\\n\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external pure override returns (bytes4) {\\n\\t\\treturn IERC721Receiver.onERC721Received.selector;\\n\\t}\\n\\n\\tfunction onERC1155Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 id,\\n\\t\\tuint256 value,\\n\\t\\tbytes calldata data\\n\\t) external pure override returns (bytes4) {\\n\\t\\treturn IERC1155Receiver.onERC1155Received.selector;\\n\\t}\\n\\n\\tfunction onERC1155BatchReceived(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256[] calldata ids,\\n\\t\\tuint256[] calldata values,\\n\\t\\tbytes calldata data\\n\\t) external pure override returns (bytes4) {\\n\\t\\treturn IERC1155Receiver.onERC1155BatchReceived.selector;\\n\\t}\\n}\\n\",\"keccak256\":\"0xabbfebfc152f19981cd2657204b7c269ac8f2830ba83f1e0a694a2c0c274f8e9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50610d5a8061001f6000396000f3fe6080604052600436106100955760003560e01c80638da5cb5b116100595780638da5cb5b1461017b578063bc197c81146101a8578063c19d93fb146101d7578063f23a6e61146101fb578063fc0c546a1461022857600080fd5b806301ffc9a7146100a1578063150b7a02146100d65780631626ba7e1461011b578063519454471461013b578063523e32601461015b57600080fd5b3661009c57005b600080fd5b3480156100ad57600080fd5b506100c16100bc3660046107aa565b610260565b60405190151581526020015b60405180910390f35b3480156100e257600080fd5b506101026100f1366004610835565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100cd565b34801561012757600080fd5b506101026101363660046108be565b6102b2565b61014e610149366004610979565b6102e9565b6040516100cd9190610a43565b34801561016757600080fd5b50610102610176366004610a56565b610422565b34801561018757600080fd5b50610190610443565b6040516001600160a01b0390911681526020016100cd565b3480156101b457600080fd5b506101026101c3366004610af0565b63bc197c8160e01b98975050505050505050565b3480156101e357600080fd5b506101ed60005481565b6040519081526020016100cd565b34801561020757600080fd5b50610102610216366004610baf565b63f23a6e6160e01b9695505050505050565b34801561023457600080fd5b5061023d6104d9565b604080519384526001600160a01b039092166020840152908201526060016100cd565b60006001600160e01b031982166301ffc9a760e01b148061029157506001600160e01b03198216636faff5f160e01b145b806102ac57506001600160e01b03198216635194544760e01b145b92915050565b6000806102c76102c0610443565b858561052c565b905080156102df5750630b135d3f60e11b90506102ac565b5060009392505050565b60606102f43361058e565b6103365760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b60448201526064015b60405180910390fd5b60ff8216156103925760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792063616c6c206f7065726174696f6e732061726520737570706f7274604482015261195960f21b606482015260840161032d565b60008081546103a090610c2b565b919050819055506000866001600160a01b03168686866040516103c4929190610c52565b60006040518083038185875af1925050503d8060008114610401576040519150601f19603f3d011682016040523d82523d6000602084013e610406565b606091505b50925090508061041857815160208301fd5b5095945050505050565b600061042d8461058e565b156102df5750630291f19360e51b5b9392505050565b6000806000806104516104d9565b925092509250468314610468576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa1580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d19190610c62565b935050505090565b60408051606080825260808201909252600091829182918291906020820181803683370190505090506060604d60208301303c808060200190518101906105209190610c7f565b93509350935050909192565b600080600061053b85856105b3565b509092509050600081600381111561055557610555610cb8565b1480156105735750856001600160a01b0316826001600160a01b0316145b806105845750610584868686610600565b9695505050505050565b6000610598610443565b6001600160a01b0316826001600160a01b0316149050919050565b600080600083516041036105ed5760208401516040850151606086015160001a6105df888285856106db565b9550955095505050506105f9565b50508151600091506002905b9250925092565b6000806000856001600160a01b03168585604051602401610622929190610cce565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b179052516106579190610cef565b600060405180830381855afa9150503d8060008114610692576040519150601f19603f3d011682016040523d82523d6000602084013e610697565b606091505b50915091508180156106ab57506020815110155b801561058457508051630b135d3f60e11b906106d09083016020908101908401610d0b565b149695505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561071657506000915060039050826107a0565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561076a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610796575060009250600191508290506107a0565b9250600091508190505b9450945094915050565b6000602082840312156107bc57600080fd5b81356001600160e01b03198116811461043c57600080fd5b6001600160a01b03811681146107e957600080fd5b50565b60008083601f8401126107fe57600080fd5b50813567ffffffffffffffff81111561081657600080fd5b60208301915083602082850101111561082e57600080fd5b9250929050565b60008060008060006080868803121561084d57600080fd5b8535610858816107d4565b94506020860135610868816107d4565b935060408601359250606086013567ffffffffffffffff81111561088b57600080fd5b610897888289016107ec565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156108d157600080fd5b82359150602083013567ffffffffffffffff808211156108f057600080fd5b818501915085601f83011261090457600080fd5b813581811115610916576109166108a8565b604051601f8201601f19908116603f0116810190838211818310171561093e5761093e6108a8565b8160405282815288602084870101111561095757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060008060006080868803121561099157600080fd5b853561099c816107d4565b945060208601359350604086013567ffffffffffffffff8111156109bf57600080fd5b6109cb888289016107ec565b909450925050606086013560ff811681146109e557600080fd5b809150509295509295909350565b60005b83811015610a0e5781810151838201526020016109f6565b50506000910152565b60008151808452610a2f8160208601602086016109f3565b601f01601f19169290920160200192915050565b60208152600061043c6020830184610a17565b600080600060408486031215610a6b57600080fd5b8335610a76816107d4565b9250602084013567ffffffffffffffff811115610a9257600080fd5b610a9e868287016107ec565b9497909650939450505050565b60008083601f840112610abd57600080fd5b50813567ffffffffffffffff811115610ad557600080fd5b6020830191508360208260051b850101111561082e57600080fd5b60008060008060008060008060a0898b031215610b0c57600080fd5b8835610b17816107d4565b97506020890135610b27816107d4565b9650604089013567ffffffffffffffff80821115610b4457600080fd5b610b508c838d01610aab565b909850965060608b0135915080821115610b6957600080fd5b610b758c838d01610aab565b909650945060808b0135915080821115610b8e57600080fd5b50610b9b8b828c016107ec565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610bc857600080fd5b8635610bd3816107d4565b95506020870135610be3816107d4565b94506040870135935060608701359250608087013567ffffffffffffffff811115610c0d57600080fd5b610c1989828a016107ec565b979a9699509497509295939492505050565b600060018201610c4b57634e487b7160e01b600052601160045260246000fd5b5060010190565b8183823760009101908152919050565b600060208284031215610c7457600080fd5b815161043c816107d4565b600080600060608486031215610c9457600080fd5b835192506020840151610ca6816107d4565b80925050604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610ce76040830184610a17565b949350505050565b60008251610d018184602087016109f3565b9190910192915050565b600060208284031215610d1d57600080fd5b505191905056fea2646970667358221220758511eec0d1a222cd1560597d0e4204376a215eda9417dfad1abf25839b90e564736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c80638da5cb5b116100595780638da5cb5b1461017b578063bc197c81146101a8578063c19d93fb146101d7578063f23a6e61146101fb578063fc0c546a1461022857600080fd5b806301ffc9a7146100a1578063150b7a02146100d65780631626ba7e1461011b578063519454471461013b578063523e32601461015b57600080fd5b3661009c57005b600080fd5b3480156100ad57600080fd5b506100c16100bc3660046107aa565b610260565b60405190151581526020015b60405180910390f35b3480156100e257600080fd5b506101026100f1366004610835565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100cd565b34801561012757600080fd5b506101026101363660046108be565b6102b2565b61014e610149366004610979565b6102e9565b6040516100cd9190610a43565b34801561016757600080fd5b50610102610176366004610a56565b610422565b34801561018757600080fd5b50610190610443565b6040516001600160a01b0390911681526020016100cd565b3480156101b457600080fd5b506101026101c3366004610af0565b63bc197c8160e01b98975050505050505050565b3480156101e357600080fd5b506101ed60005481565b6040519081526020016100cd565b34801561020757600080fd5b50610102610216366004610baf565b63f23a6e6160e01b9695505050505050565b34801561023457600080fd5b5061023d6104d9565b604080519384526001600160a01b039092166020840152908201526060016100cd565b60006001600160e01b031982166301ffc9a760e01b148061029157506001600160e01b03198216636faff5f160e01b145b806102ac57506001600160e01b03198216635194544760e01b145b92915050565b6000806102c76102c0610443565b858561052c565b905080156102df5750630b135d3f60e11b90506102ac565b5060009392505050565b60606102f43361058e565b6103365760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b60448201526064015b60405180910390fd5b60ff8216156103925760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792063616c6c206f7065726174696f6e732061726520737570706f7274604482015261195960f21b606482015260840161032d565b60008081546103a090610c2b565b919050819055506000866001600160a01b03168686866040516103c4929190610c52565b60006040518083038185875af1925050503d8060008114610401576040519150601f19603f3d011682016040523d82523d6000602084013e610406565b606091505b50925090508061041857815160208301fd5b5095945050505050565b600061042d8461058e565b156102df5750630291f19360e51b5b9392505050565b6000806000806104516104d9565b925092509250468314610468576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa1580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d19190610c62565b935050505090565b60408051606080825260808201909252600091829182918291906020820181803683370190505090506060604d60208301303c808060200190518101906105209190610c7f565b93509350935050909192565b600080600061053b85856105b3565b509092509050600081600381111561055557610555610cb8565b1480156105735750856001600160a01b0316826001600160a01b0316145b806105845750610584868686610600565b9695505050505050565b6000610598610443565b6001600160a01b0316826001600160a01b0316149050919050565b600080600083516041036105ed5760208401516040850151606086015160001a6105df888285856106db565b9550955095505050506105f9565b50508151600091506002905b9250925092565b6000806000856001600160a01b03168585604051602401610622929190610cce565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b179052516106579190610cef565b600060405180830381855afa9150503d8060008114610692576040519150601f19603f3d011682016040523d82523d6000602084013e610697565b606091505b50915091508180156106ab57506020815110155b801561058457508051630b135d3f60e11b906106d09083016020908101908401610d0b565b149695505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561071657506000915060039050826107a0565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561076a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610796575060009250600191508290506107a0565b9250600091508190505b9450945094915050565b6000602082840312156107bc57600080fd5b81356001600160e01b03198116811461043c57600080fd5b6001600160a01b03811681146107e957600080fd5b50565b60008083601f8401126107fe57600080fd5b50813567ffffffffffffffff81111561081657600080fd5b60208301915083602082850101111561082e57600080fd5b9250929050565b60008060008060006080868803121561084d57600080fd5b8535610858816107d4565b94506020860135610868816107d4565b935060408601359250606086013567ffffffffffffffff81111561088b57600080fd5b610897888289016107ec565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156108d157600080fd5b82359150602083013567ffffffffffffffff808211156108f057600080fd5b818501915085601f83011261090457600080fd5b813581811115610916576109166108a8565b604051601f8201601f19908116603f0116810190838211818310171561093e5761093e6108a8565b8160405282815288602084870101111561095757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060008060006080868803121561099157600080fd5b853561099c816107d4565b945060208601359350604086013567ffffffffffffffff8111156109bf57600080fd5b6109cb888289016107ec565b909450925050606086013560ff811681146109e557600080fd5b809150509295509295909350565b60005b83811015610a0e5781810151838201526020016109f6565b50506000910152565b60008151808452610a2f8160208601602086016109f3565b601f01601f19169290920160200192915050565b60208152600061043c6020830184610a17565b600080600060408486031215610a6b57600080fd5b8335610a76816107d4565b9250602084013567ffffffffffffffff811115610a9257600080fd5b610a9e868287016107ec565b9497909650939450505050565b60008083601f840112610abd57600080fd5b50813567ffffffffffffffff811115610ad557600080fd5b6020830191508360208260051b850101111561082e57600080fd5b60008060008060008060008060a0898b031215610b0c57600080fd5b8835610b17816107d4565b97506020890135610b27816107d4565b9650604089013567ffffffffffffffff80821115610b4457600080fd5b610b508c838d01610aab565b909850965060608b0135915080821115610b6957600080fd5b610b758c838d01610aab565b909650945060808b0135915080821115610b8e57600080fd5b50610b9b8b828c016107ec565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610bc857600080fd5b8635610bd3816107d4565b95506020870135610be3816107d4565b94506040870135935060608701359250608087013567ffffffffffffffff811115610c0d57600080fd5b610c1989828a016107ec565b979a9699509497509295939492505050565b600060018201610c4b57634e487b7160e01b600052601160045260246000fd5b5060010190565b8183823760009101908152919050565b600060208284031215610c7457600080fd5b815161043c816107d4565b600080600060608486031215610c9457600080fd5b835192506020840151610ca6816107d4565b80925050604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610ce76040830184610a17565b949350505050565b60008251610d018184602087016109f3565b9190910192915050565b600060208284031215610d1d57600080fd5b505191905056fea2646970667358221220758511eec0d1a222cd1560597d0e4204376a215eda9417dfad1abf25839b90e564736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isValidSignature(bytes32,bytes)": {
        "details": "Should return whether the signature provided is valid for the provided data",
        "params": {
          "hash": "Hash of the data to be signed",
          "signature": "Signature byte array associated with _data"
        }
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "ids": "An array containing ids of each token being transferred (order and length must match values array)",
          "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
          "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "id": "The ID of the token being transferred",
          "operator": "The address which initiated the transfer (i.e. msg.sender)",
          "value": "The amount of tokens being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8132,
        "contract": "contracts/ERC6551Account.sol:ERC6551Account",
        "label": "state",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}