{
  "address": "0xDFc02e7eD1A119ceDD91cA4ff030F01F450912a9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "isValidSigner",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe25ab7d198e98b99657b705be8e4fc2c33953f838eef8c30e544e6eeaf17ec0c",
  "receipt": {
    "to": null,
    "from": "0xAe451f1873B4C4D7263631Bf0ea141D54Ba39eEa",
    "contractAddress": "0xDFc02e7eD1A119ceDD91cA4ff030F01F450912a9",
    "transactionIndex": 0,
    "gasUsed": "646673",
    "logsBloom": "0x
    "blockHash": "0x503e142524a6f67d5e54ba2aa6a6750f7c22476b85a0bfd172e59321f2719eb0",
    "transactionHash": "0xe25ab7d198e98b99657b705be8e4fc2c33953f838eef8c30e544e6eeaf17ec0c",
    "logs": [],
    "blockNumber": 581018,
    "cumulativeGasUsed": "646673",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "912ad29acac3083571ed6b4e5349f202",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isValidSigner\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC6551Account.sol\":\"ERC6551Account\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x6b11eb41a228cca35d4b662b4df69fcd75192851365102690f57b2ac01e83fe6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/ERC6551Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\n// https://github.com/erc6551/reference/blob/main/src/examples/simple/ERC6551Account.sol\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\ninterface IERC6551Account {\\n    receive() external payable;\\n\\n    function token()\\n        external\\n        view\\n        returns (uint256 chainId, address tokenContract, uint256 tokenId);\\n\\n    function state() external view returns (uint256);\\n\\n    function isValidSigner(address signer, bytes calldata context)\\n        external\\n        view\\n        returns (bytes4 magicValue);\\n}\\n\\ninterface IERC6551Executable {\\n    function execute(address to, uint256 value, bytes calldata data, uint8 operation)\\n        external\\n        payable\\n        returns (bytes memory);\\n}\\n\\ncontract ERC6551Account is IERC165, IERC1271, IERC6551Account, IERC6551Executable {\\n    uint256 public state;\\n\\n    receive() external payable {}\\n\\n    function execute(address to, uint256 value, bytes calldata data, uint8 operation)\\n        external\\n        payable\\n        virtual\\n        returns (bytes memory result)\\n    {\\n        require(_isValidSigner(msg.sender), \\\"Invalid signer\\\");\\n        require(operation == 0, \\\"Only call operations are supported\\\");\\n\\n        ++state;\\n\\n        bool success;\\n        (success, result) = to.call{value: value}(data);\\n\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    function isValidSigner(address signer, bytes calldata) external view virtual returns (bytes4) {\\n        if (_isValidSigner(signer)) {\\n            return IERC6551Account.isValidSigner.selector;\\n        }\\n\\n        return bytes4(0);\\n    }\\n\\n    function isValidSignature(bytes32 hash, bytes memory signature)\\n        external\\n        view\\n        virtual\\n        returns (bytes4 magicValue)\\n    {\\n        bool isValid = SignatureChecker.isValidSignatureNow(owner(), hash, signature);\\n\\n        if (isValid) {\\n            return IERC1271.isValidSignature.selector;\\n        }\\n\\n        return bytes4(0);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId\\n            || interfaceId == type(IERC6551Account).interfaceId\\n            || interfaceId == type(IERC6551Executable).interfaceId;\\n    }\\n\\n    function token() public view virtual returns (uint256, address, uint256) {\\n        bytes memory footer = new bytes(0x60);\\n\\n        assembly {\\n            extcodecopy(address(), add(footer, 0x20), 0x4d, 0x60)\\n        }\\n\\n        return abi.decode(footer, (uint256, address, uint256));\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        (uint256 chainId, address tokenContract, uint256 tokenId) = token();\\n        if (chainId != block.chainid) return address(0);\\n\\n        return IERC721(tokenContract).ownerOf(tokenId);\\n    }\\n\\n    function _isValidSigner(address signer) internal view virtual returns (bool) {\\n        return signer == owner();\\n    }\\n}\\n\",\"keccak256\":\"0x566c184b159388f594fd9f1b6f0ea21a07086aa940b24a154d9c97e7193627d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50610abe8061001f6000396000f3fe6080604052600436106100745760003560e01c8063523e32601161004e578063523e32601461010e5780638da5cb5b1461012e578063c19d93fb1461015b578063fc0c546a1461017f57600080fd5b806301ffc9a7146100805780631626ba7e146100b557806351945447146100ee57600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610701565b6101b7565b60405190151581526020015b60405180910390f35b3480156100c157600080fd5b506100d56100d0366004610741565b610209565b6040516001600160e01b031990911681526020016100ac565b6101016100fc36600461085d565b610240565b6040516100ac9190610927565b34801561011a57600080fd5b506100d561012936600461093a565b610379565b34801561013a57600080fd5b5061014361039a565b6040516001600160a01b0390911681526020016100ac565b34801561016757600080fd5b5061017160005481565b6040519081526020016100ac565b34801561018b57600080fd5b50610194610430565b604080519384526001600160a01b039092166020840152908201526060016100ac565b60006001600160e01b031982166301ffc9a760e01b14806101e857506001600160e01b03198216636faff5f160e01b145b8061020357506001600160e01b03198216635194544760e01b145b92915050565b60008061021e61021761039a565b8585610483565b905080156102365750630b135d3f60e11b9050610203565b5060009392505050565b606061024b336104e5565b61028d5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b60448201526064015b60405180910390fd5b60ff8216156102e95760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792063616c6c206f7065726174696f6e732061726520737570706f7274604482015261195960f21b6064820152608401610284565b60008081546102f79061098f565b919050819055506000866001600160a01b031686868660405161031b9291906109b6565b60006040518083038185875af1925050503d8060008114610358576040519150601f19603f3d011682016040523d82523d6000602084013e61035d565b606091505b50925090508061036f57815160208301fd5b5095945050505050565b6000610384846104e5565b156102365750630291f19360e51b5b9392505050565b6000806000806103a8610430565b9250925092504683146103bf576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa158015610404573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042891906109c6565b935050505090565b60408051606080825260808201909252600091829182918291906020820181803683370190505090506060604d60208301303c8080602001905181019061047791906109e3565b93509350935050909192565b6000806000610492858561050a565b50909250905060008160038111156104ac576104ac610a1c565b1480156104ca5750856001600160a01b0316826001600160a01b0316145b806104db57506104db868686610557565b9695505050505050565b60006104ef61039a565b6001600160a01b0316826001600160a01b0316149050919050565b600080600083516041036105445760208401516040850151606086015160001a61053688828585610632565b955095509550505050610550565b50508151600091506002905b9250925092565b6000806000856001600160a01b03168585604051602401610579929190610a32565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b179052516105ae9190610a53565b600060405180830381855afa9150503d80600081146105e9576040519150601f19603f3d011682016040523d82523d6000602084013e6105ee565b606091505b509150915081801561060257506020815110155b80156104db57508051630b135d3f60e11b906106279083016020908101908401610a6f565b149695505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561066d57506000915060039050826106f7565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156106c1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166106ed575060009250600191508290506106f7565b9250600091508190505b9450945094915050565b60006020828403121561071357600080fd5b81356001600160e01b03198116811461039357600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561075457600080fd5b82359150602083013567ffffffffffffffff8082111561077357600080fd5b818501915085601f83011261078757600080fd5b8135818111156107995761079961072b565b604051601f8201601f19908116603f011681019083821181831017156107c1576107c161072b565b816040528281528860208487010111156107da57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b038116811461081157600080fd5b50565b60008083601f84011261082657600080fd5b50813567ffffffffffffffff81111561083e57600080fd5b60208301915083602082850101111561085657600080fd5b9250929050565b60008060008060006080868803121561087557600080fd5b8535610880816107fc565b945060208601359350604086013567ffffffffffffffff8111156108a357600080fd5b6108af88828901610814565b909450925050606086013560ff811681146108c957600080fd5b809150509295509295909350565b60005b838110156108f25781810151838201526020016108da565b50506000910152565b600081518084526109138160208601602086016108d7565b601f01601f19169290920160200192915050565b60208152600061039360208301846108fb565b60008060006040848603121561094f57600080fd5b833561095a816107fc565b9250602084013567ffffffffffffffff81111561097657600080fd5b61098286828701610814565b9497909650939450505050565b6000600182016109af57634e487b7160e01b600052601160045260246000fd5b5060010190565b8183823760009101908152919050565b6000602082840312156109d857600080fd5b8151610393816107fc565b6000806000606084860312156109f857600080fd5b835192506020840151610a0a816107fc565b80925050604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610a4b60408301846108fb565b949350505050565b60008251610a658184602087016108d7565b9190910192915050565b600060208284031215610a8157600080fd5b505191905056fea26469706673582212203874ef8bd7d93268c5ff8595402c9ca678eb2e33616c5ef4b50799198ec22a7764736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063523e32601161004e578063523e32601461010e5780638da5cb5b1461012e578063c19d93fb1461015b578063fc0c546a1461017f57600080fd5b806301ffc9a7146100805780631626ba7e146100b557806351945447146100ee57600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610701565b6101b7565b60405190151581526020015b60405180910390f35b3480156100c157600080fd5b506100d56100d0366004610741565b610209565b6040516001600160e01b031990911681526020016100ac565b6101016100fc36600461085d565b610240565b6040516100ac9190610927565b34801561011a57600080fd5b506100d561012936600461093a565b610379565b34801561013a57600080fd5b5061014361039a565b6040516001600160a01b0390911681526020016100ac565b34801561016757600080fd5b5061017160005481565b6040519081526020016100ac565b34801561018b57600080fd5b50610194610430565b604080519384526001600160a01b039092166020840152908201526060016100ac565b60006001600160e01b031982166301ffc9a760e01b14806101e857506001600160e01b03198216636faff5f160e01b145b8061020357506001600160e01b03198216635194544760e01b145b92915050565b60008061021e61021761039a565b8585610483565b905080156102365750630b135d3f60e11b9050610203565b5060009392505050565b606061024b336104e5565b61028d5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b60448201526064015b60405180910390fd5b60ff8216156102e95760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792063616c6c206f7065726174696f6e732061726520737570706f7274604482015261195960f21b6064820152608401610284565b60008081546102f79061098f565b919050819055506000866001600160a01b031686868660405161031b9291906109b6565b60006040518083038185875af1925050503d8060008114610358576040519150601f19603f3d011682016040523d82523d6000602084013e61035d565b606091505b50925090508061036f57815160208301fd5b5095945050505050565b6000610384846104e5565b156102365750630291f19360e51b5b9392505050565b6000806000806103a8610430565b9250925092504683146103bf576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa158015610404573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042891906109c6565b935050505090565b60408051606080825260808201909252600091829182918291906020820181803683370190505090506060604d60208301303c8080602001905181019061047791906109e3565b93509350935050909192565b6000806000610492858561050a565b50909250905060008160038111156104ac576104ac610a1c565b1480156104ca5750856001600160a01b0316826001600160a01b0316145b806104db57506104db868686610557565b9695505050505050565b60006104ef61039a565b6001600160a01b0316826001600160a01b0316149050919050565b600080600083516041036105445760208401516040850151606086015160001a61053688828585610632565b955095509550505050610550565b50508151600091506002905b9250925092565b6000806000856001600160a01b03168585604051602401610579929190610a32565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b179052516105ae9190610a53565b600060405180830381855afa9150503d80600081146105e9576040519150601f19603f3d011682016040523d82523d6000602084013e6105ee565b606091505b509150915081801561060257506020815110155b80156104db57508051630b135d3f60e11b906106279083016020908101908401610a6f565b149695505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561066d57506000915060039050826106f7565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156106c1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166106ed575060009250600191508290506106f7565b9250600091508190505b9450945094915050565b60006020828403121561071357600080fd5b81356001600160e01b03198116811461039357600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561075457600080fd5b82359150602083013567ffffffffffffffff8082111561077357600080fd5b818501915085601f83011261078757600080fd5b8135818111156107995761079961072b565b604051601f8201601f19908116603f011681019083821181831017156107c1576107c161072b565b816040528281528860208487010111156107da57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b038116811461081157600080fd5b50565b60008083601f84011261082657600080fd5b50813567ffffffffffffffff81111561083e57600080fd5b60208301915083602082850101111561085657600080fd5b9250929050565b60008060008060006080868803121561087557600080fd5b8535610880816107fc565b945060208601359350604086013567ffffffffffffffff8111156108a357600080fd5b6108af88828901610814565b909450925050606086013560ff811681146108c957600080fd5b809150509295509295909350565b60005b838110156108f25781810151838201526020016108da565b50506000910152565b600081518084526109138160208601602086016108d7565b601f01601f19169290920160200192915050565b60208152600061039360208301846108fb565b60008060006040848603121561094f57600080fd5b833561095a816107fc565b9250602084013567ffffffffffffffff81111561097657600080fd5b61098286828701610814565b9497909650939450505050565b6000600182016109af57634e487b7160e01b600052601160045260246000fd5b5060010190565b8183823760009101908152919050565b6000602082840312156109d857600080fd5b8151610393816107fc565b6000806000606084860312156109f857600080fd5b835192506020840151610a0a816107fc565b80925050604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610a4b60408301846108fb565b949350505050565b60008251610a658184602087016108d7565b9190910192915050565b600060208284031215610a8157600080fd5b505191905056fea26469706673582212203874ef8bd7d93268c5ff8595402c9ca678eb2e33616c5ef4b50799198ec22a7764736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isValidSignature(bytes32,bytes)": {
        "details": "Should return whether the signature provided is valid for the provided data",
        "params": {
          "hash": "Hash of the data to be signed",
          "signature": "Signature byte array associated with _data"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4744,
        "contract": "contracts/ERC6551Account.sol:ERC6551Account",
        "label": "state",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}