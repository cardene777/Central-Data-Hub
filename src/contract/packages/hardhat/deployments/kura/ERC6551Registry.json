{
  "address": "0x9A898F020Db575A5Dd951189B8D44f6e4d84FF5B",
  "abi": [
    {
      "inputs": [],
      "name": "AccountCreationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC6551AccountCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "account",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "createAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xac80e00f3268ff7b25f569b0e45772a80e8559fec9b3c5e823914fa0eab2004b",
  "receipt": {
    "to": null,
    "from": "0xAe451f1873B4C4D7263631Bf0ea141D54Ba39eEa",
    "contractAddress": "0x9A898F020Db575A5Dd951189B8D44f6e4d84FF5B",
    "transactionIndex": 0,
    "gasUsed": "176551",
    "logsBloom": "0x
    "blockHash": "0x5b2db68152d245356252a9d590188afdee742f58a110ab0476b3c62ec6a89a42",
    "transactionHash": "0xac80e00f3268ff7b25f569b0e45772a80e8559fec9b3c5e823914fa0eab2004b",
    "logs": [],
    "blockNumber": 537692,
    "cumulativeGasUsed": "176551",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3b05f4497c40b0bcd563e9fa8dd85033",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountCreationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC6551AccountCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccountCreationFailed()\":[{\"details\":\"The registry MUST revert with AccountCreationFailed error if the create2 operation fails.\"}]},\"events\":{\"ERC6551AccountCreated(address,address,bytes32,uint256,address,uint256)\":{\"details\":\"The registry MUST emit the ERC6551AccountCreated event upon successful account creation.\"}},\"kind\":\"dev\",\"methods\":{\"account(address,bytes32,uint256,address,uint256)\":{\"details\":\"Returns the computed token bound account address for a non-fungible token.\",\"returns\":{\"_0\":\"The address of the token bound account\"}},\"createAccount(address,bytes32,uint256,address,uint256)\":{\"details\":\"Creates a token bound account for a non-fungible token. If account has already been created, returns the account address without calling create2. Emits ERC6551AccountCreated event.\",\"returns\":{\"_0\":\"The address of the token bound account\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC6551Registry.sol\":\"ERC6551Registry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n// https://github.com/erc6551/reference/blob/main/src/ERC6551Registry.sol\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev The registry MUST emit the ERC6551AccountCreated event upon successful account creation.\\n     */\\n    event ERC6551AccountCreated(\\n        address account,\\n        address indexed implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev The registry MUST revert with AccountCreationFailed error if the create2 operation fails.\\n     */\\n    error AccountCreationFailed();\\n\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token.\\n     *\\n     * If account has already been created, returns the account address without calling create2.\\n     *\\n     * Emits ERC6551AccountCreated event.\\n     *\\n     * @return account The address of the token bound account\\n     */\\n    function createAccount(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external returns (address account);\\n\\n    /**\\n     * @dev Returns the computed token bound account address for a non-fungible token.\\n     *\\n     * @return account The address of the token bound account\\n     */\\n    function account(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external view returns (address account);\\n}\\n\\ncontract ERC6551Registry is IERC6551Registry {\\n    function createAccount(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external returns (address) {\\n        assembly {\\n            // Memory Layout:\\n            // ----\\n            // 0x00   0xff                           (1 byte)\\n            // 0x01   registry (address)             (20 bytes)\\n            // 0x15   salt (bytes32)                 (32 bytes)\\n            // 0x35   Bytecode Hash (bytes32)        (32 bytes)\\n            // ----\\n            // 0x55   ERC-1167 Constructor + Header  (20 bytes)\\n            // 0x69   implementation (address)       (20 bytes)\\n            // 0x5D   ERC-1167 Footer                (15 bytes)\\n            // 0x8C   salt (uint256)                 (32 bytes)\\n            // 0xAC   chainId (uint256)              (32 bytes)\\n            // 0xCC   tokenContract (address)        (32 bytes)\\n            // 0xEC   tokenId (uint256)              (32 bytes)\\n\\n            // Silence unused variable warnings\\n            pop(chainId)\\n\\n            // Copy bytecode + constant data to memory\\n            calldatacopy(0x8c, 0x24, 0x80) // salt, chainId, tokenContract, tokenId\\n            mstore(0x6c, 0x5af43d82803e903d91602b57fd5bf3) // ERC-1167 footer\\n            mstore(0x5d, implementation) // implementation\\n            mstore(0x49, 0x3d60ad80600a3d3981f3363d3d373d3d3d363d73) // ERC-1167 constructor + header\\n\\n            // Copy create2 computation data to memory\\n            mstore8(0x00, 0xff) // 0xFF\\n            mstore(0x35, keccak256(0x55, 0xb7)) // keccak256(bytecode)\\n            mstore(0x01, shl(96, address())) // registry address\\n            mstore(0x15, salt) // salt\\n\\n            // Compute account address\\n            let computed := keccak256(0x00, 0x55)\\n\\n            // If the account has not yet been deployed\\n            if iszero(extcodesize(computed)) {\\n                // Deploy account contract\\n                let deployed := create2(0, 0x55, 0xb7, salt)\\n\\n                // Revert if the deployment fails\\n                if iszero(deployed) {\\n                    mstore(0x00, 0x20188a59) // `AccountCreationFailed()`\\n                    revert(0x1c, 0x04)\\n                }\\n\\n                // Store account address in memory before salt and chainId\\n                mstore(0x6c, deployed)\\n\\n                // Emit the ERC6551AccountCreated event\\n                log4(\\n                    0x6c,\\n                    0x60,\\n                    // `ERC6551AccountCreated(address,address,bytes32,uint256,address,uint256)`\\n                    0x79f19b3655ee38b1ce526556b7731a20c8f218fbda4a3990b6cc4172fdf88722,\\n                    implementation,\\n                    tokenContract,\\n                    tokenId\\n                )\\n\\n                // Return the account address\\n                return(0x6c, 0x20)\\n            }\\n\\n            // Otherwise, return the computed account address\\n            mstore(0x00, shr(96, shl(96, computed)))\\n            return(0x00, 0x20)\\n        }\\n    }\\n\\n    function account(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external view returns (address) {\\n        assembly {\\n            // Silence unused variable warnings\\n            pop(chainId)\\n            pop(tokenContract)\\n            pop(tokenId)\\n\\n            // Copy bytecode + constant data to memory\\n            calldatacopy(0x8c, 0x24, 0x80) // salt, chainId, tokenContract, tokenId\\n            mstore(0x6c, 0x5af43d82803e903d91602b57fd5bf3) // ERC-1167 footer\\n            mstore(0x5d, implementation) // implementation\\n            mstore(0x49, 0x3d60ad80600a3d3981f3363d3d373d3d3d363d73) // ERC-1167 constructor + header\\n\\n            // Copy create2 computation data to memory\\n            mstore8(0x00, 0xff) // 0xFF\\n            mstore(0x35, keccak256(0x55, 0xb7)) // keccak256(bytecode)\\n            mstore(0x01, shl(96, address())) // registry address\\n            mstore(0x15, salt) // salt\\n\\n            // Store computed account address in memory\\n            mstore(0x00, shr(96, shl(96, keccak256(0x00, 0x55))))\\n\\n            // Return computed account address\\n            return(0x00, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48466aa691b0c563b3bcdc3052740f7384b9df40a7539f934e1f8df189425d35\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061023b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063246a00211461003b5780638a54c52f1461006a575b600080fd5b61004e6100493660046101b7565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e6100783660046101b7565b6100e1565b600060806024608c376e5af43d82803e903d91602b57fd5bf3606c5285605d52733d60ad80600a3d3981f3363d3d373d3d3d363d7360495260ff60005360b76055206035523060601b60015284601552605560002060601b60601c60005260206000f35b600060806024608c376e5af43d82803e903d91602b57fd5bf3606c5285605d52733d60ad80600a3d3981f3363d3d373d3d3d363d7360495260ff60005360b76055206035523060601b600152846015526055600020803b61018b578560b760556000f580610157576320188a596000526004601cfd5b80606c52508284887f79f19b3655ee38b1ce526556b7731a20c8f218fbda4a3990b6cc4172fdf887226060606ca46020606cf35b8060601b60601c60005260206000f35b80356001600160a01b03811681146101b257600080fd5b919050565b600080600080600060a086880312156101cf57600080fd5b6101d88661019b565b945060208601359350604086013592506101f46060870161019b565b94979396509194608001359291505056fea26469706673582212205529bd84d9f014d324b455344972362002e13917dfd3a38bddbb2896897279fe64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063246a00211461003b5780638a54c52f1461006a575b600080fd5b61004e6100493660046101b7565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e6100783660046101b7565b6100e1565b600060806024608c376e5af43d82803e903d91602b57fd5bf3606c5285605d52733d60ad80600a3d3981f3363d3d373d3d3d363d7360495260ff60005360b76055206035523060601b60015284601552605560002060601b60601c60005260206000f35b600060806024608c376e5af43d82803e903d91602b57fd5bf3606c5285605d52733d60ad80600a3d3981f3363d3d373d3d3d363d7360495260ff60005360b76055206035523060601b600152846015526055600020803b61018b578560b760556000f580610157576320188a596000526004601cfd5b80606c52508284887f79f19b3655ee38b1ce526556b7731a20c8f218fbda4a3990b6cc4172fdf887226060606ca46020606cf35b8060601b60601c60005260206000f35b80356001600160a01b03811681146101b257600080fd5b919050565b600080600080600060a086880312156101cf57600080fd5b6101d88661019b565b945060208601359350604086013592506101f46060870161019b565b94979396509194608001359291505056fea26469706673582212205529bd84d9f014d324b455344972362002e13917dfd3a38bddbb2896897279fe64736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AccountCreationFailed()": [
        {
          "details": "The registry MUST revert with AccountCreationFailed error if the create2 operation fails."
        }
      ]
    },
    "events": {
      "ERC6551AccountCreated(address,address,bytes32,uint256,address,uint256)": {
        "details": "The registry MUST emit the ERC6551AccountCreated event upon successful account creation."
      }
    },
    "kind": "dev",
    "methods": {
      "account(address,bytes32,uint256,address,uint256)": {
        "details": "Returns the computed token bound account address for a non-fungible token.",
        "returns": {
          "_0": "The address of the token bound account"
        }
      },
      "createAccount(address,bytes32,uint256,address,uint256)": {
        "details": "Creates a token bound account for a non-fungible token. If account has already been created, returns the account address without calling create2. Emits ERC6551AccountCreated event.",
        "returns": {
          "_0": "The address of the token bound account"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}